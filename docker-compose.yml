services:
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    # no healthcheck; ingest waits via wait_for_qdrant.py

  ingest:
    build:
      context: .
      dockerfile: music-theory-assistant/Dockerfile
    command: bash -lc "python wait_for_qdrant.py && python ingest.py"
    environment:
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: zoomcamp-music-theory-assistant
      EMBED_MODEL: jinaai/jina-embeddings-v2-small-en
      EMBED_DIM: 512
      CSV_PATH: /data/music-theory-dataset-100.csv
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./music-theory-assistant:/app
      - ./data:/data:ro
    depends_on:
      qdrant:
        condition: service_started
    restart: "no"

  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-music_theory_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-your_username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  db-init:
    build:
      context: .
      dockerfile: music-theory-assistant/Dockerfile
    command: bash -lc "python db_prep.py"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-music_theory_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-your_username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
      TZ: Europe/London
      RUN_TIMEZONE_CHECK: "0"
    volumes:
      - ./music-theory-assistant:/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  app:
    build:
      context: .
      dockerfile: music-theory-assistant/Dockerfile
    command: bash -lc "streamlit run app.py --server.address=0.0.0.0 --server.port=8501"
    ports:
      - "8501:8501"
    environment:
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: zoomcamp-music-theory-assistant
      EMBED_MODEL: jinaai/jina-embeddings-v2-small-en
      EMBED_DIM: 512
      TOP_K: 5
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-music_theory_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-your_username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
      TZ: Europe/London
      RUN_TIMEZONE_CHECK: "0"
    volumes:
      - ./music-theory-assistant:/app
      - ./data:/data:ro
    depends_on:
      qdrant:
        condition: service_started
      ingest:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully

  api:
    build:
      context: .
      dockerfile: music-theory-assistant/Dockerfile
    command: bash -lc "uvicorn api:app --host 0.0.0.0 --port 8000"
    ports:
      - "8000:8000"
    environment:
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION: zoomcamp-music-theory-assistant
      EMBED_MODEL: jinaai/jina-embeddings-v2-small-en
      EMBED_DIM: 512
      TOP_K: 5
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-music_theory_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-your_username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password}
      TZ: Europe/London
      RUN_TIMEZONE_CHECK: "0"
    volumes:
      - ./music-theory-assistant:/app
      - ./data:/data:ro
    depends_on:
      qdrant:
        condition: service_started
      ingest:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-your_username}:${POSTGRES_PASSWORD:-your_password}@postgres:5432/${POSTGRES_DB:-music_theory_assistant}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    # profiles: ["monitoring"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    depends_on:
      api:
        condition: service_started
      postgres-exporter:
        condition: service_started
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    # profiles: ["monitoring"]
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_storage:/var/lib/grafana
      - ./monitoring/provisioning:/etc/grafana/provisioning
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

volumes:
  qdrant_storage:
  pg_data:
  grafana_storage:
